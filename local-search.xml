<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Assignment1</title>
    <link href="/2022/05/21/Assignment1/"/>
    <url>/2022/05/21/Assignment1/</url>
    
    <content type="html"><![CDATA[<h1 id="games101作业1">Games101作业1</h1><h2 id="预备知识">预备知识</h2><h4 id="总览">1.总览</h4><p>​ 到目前为止，我们已经学习了如何使用矩阵变换来排列二维或三维空间中的对象。所以现在是时候通过实现一些简单的变换矩阵来获得一些实际经验了。在接下来的三次作业中，我们将要求你去模拟一个基于 CPU的光栅化渲染器的简化版本。</p><p>​ 以下是你需要在 <strong>main.cpp</strong>中修改的函数（请不要修改任何的函数名和其他已经填写好的函数，并保证提交的代码是已经完成且能运行的）：</p><ul><li><code>get_model_matrix(float rotation_angle)</code>:逐个元素地构建模型变换矩阵并返回该矩阵。在此函数中，你只需要实现三维中绕 z 轴旋转的变换矩阵，而不用处理平移与缩放。</li><li><code>get_projection_matrix(float eye_fov, float aspect_ratio, float zNear, float zFar)</code>:使用给定的参数逐个元素地构建透视投影矩阵并返回 该矩阵。</li><li><code>[Optional] main()</code>: 自行补充你所需的其他操作。</li></ul><p>​ 当你在上述函数中正确地构建了模型与投影矩阵，光栅化器会创建一个窗口显示出线框三角形。由于光栅化器是逐帧渲染与绘制的，所以你可以使用 A 和 D键去将该三角形绕 z 轴旋转<strong>(此处有一项提高作业，将三角形绕任意过原点的轴旋转)</strong>。当你按下Esc 键时，窗口会关闭且程序终止。</p><p>​ 另外，你也可以从命令行中运行该程序。你可以使用以下命令来运行和传递旋转角给程序，在这样的运行方式下，是不会生成任何的窗口，输出的结果图像会被存储在给定的文件中 (若未指定文件名，则默认存储(output.png中)。图像的存储位置在可执行文件旁，所以如果你的可执行文件是在 build文件夹中， 那么图像也会存储在该文件夹内。</p><p>命令行的使用命令如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs c++">./Rasterizer <span class="hljs-comment">//循 环 运 行 程 序， 创 建 一 个 窗 口 显 示， 且 你 可 以</span><br> <span class="hljs-comment">//使 用A键 和D键 旋 转 三 角 形。</span><br>./Rasterizer −r <span class="hljs-number">20</span> <span class="hljs-comment">//运 行 程 序 并 将 三 角 形 旋 转20度,然 后 将</span><br>   <span class="hljs-comment">//结 果 存 在output.png中</span><br>./Rasterizer −r <span class="hljs-number">20</span> image.png <span class="hljs-comment">//运 行 程 序 并 将 三 角 形 旋 转20度，</span><br> <span class="hljs-comment">//然 后 将 结 果 存 在image.png中。</span><br></code></pre></td></tr></table></figure><h4 id="代码框架">2.代码框架</h4><p>​ 在本次作业中，因为你并不需要去使用三角形类，所以你需要理解与修改的文件为:rasterizer.hpp 和 main.cpp。其中 rasterizer.hpp文件作用是生成渲染器界面与绘制。</p><p>​ 光栅化器类在该程序系统中起着重要的作用，其成员变量与函数如下。</p><p>成员变量：</p><ul><li><code>Matrix4f model, view, projection</code>:三个四维变换矩阵</li><li><code>vector frame_buf</code>:帧缓冲对象，用于存储需要在屏幕上绘制的颜色数据</li></ul><p>成员函数：</p><ul><li><code>set_model(const Eigen::Matrix4f&amp; m)</code>：将内部的模型矩阵作为参数传递给光栅化器</li><li><code>set_view(const Eigen::Matrix4f&amp; v)</code>：将视图变换矩阵设为内部视图矩阵</li><li><code>set_projection(const Eigen::Matrix4f&amp; p)</code>：将内部的投影矩阵设为给定矩阵 p，并传递给光栅化器</li><li><code>set_pixel(Vector2f point, Vector3f color)</code>：将屏幕像素点(x, y) 设 为 (r, g, b) 的颜色，并写入相应的帧缓冲区位置</li></ul><p>​ 在 main.cpp中，我们模拟了图形管线。我们首先定义了光栅化器类的实例，然后设置了其必要的变量。然后我们得到一个带有三个顶点的硬编码三角形<strong>(请不要修改它)</strong>。</p><p>​ 在主函数上，我们定义了三个分别计算模型、视图和投影矩阵的函数，每一个函数都会返回相应的矩阵。接着，这三个函数的返回值会被<strong>set_model()</strong>, <strong>set_view()</strong> 和<strong>set_projection()</strong>三个函数传入光栅化器中。最后，光栅化器在屏幕上显示出变换的结果。</p><p>​ 在用模型、视图、投影矩阵对给定几何体进行变换后，我们得到三个顶点的正则化空间坐标 (canonical spacecoordinate)。正则化空间坐标是由三个取值范围在 [-1,1] 之间的 x, y, z坐标构成。我们下一步需要做的就是视口变换，将坐标映 射到我们的屏幕中(window_width * window_height)，这些在光栅化器中都已完成，所以不需要担心。但是，你需要去理解这步操作是如何运作的，这一点十分重要。</p><h4 id="观测视图变换">3.观测/视图变换</h4><p><strong>模型变换</strong>（modelingtranformation）：将一个物体自身进行变换（缩放、旋转、平移）视角变换（view tranformation）：根据眼睛来判断物体的相对位置投影变换（projectiontranformation）：将三维空间内的物体投影至标准二维平面([-1,1]^2)之上</p><p>视口变换（viewporttransformation）：将处于标准平面映射到屏幕分辨率范围之内，即<spanclass="math inline">\([-1,1]^2\)</span> <spanclass="math inline">\(\rightarrow\)</span>[0,width]*[0,height],其中width和height指屏幕分辨率大小</p><h2 id="作业内容">作业内容</h2><h4 id="编译">1.编译</h4><p>使用虚拟机并用 CMake 进行编译，请在终端 (命令行) 下输入以下内容：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++">mkdir build <span class="hljs-comment">// 创 建build文 件 夹 以 保 留 的 工 程 文 件。</span><br>cd build <span class="hljs-comment">// 进 入build文 件 夹。</span><br>cmake .. <span class="hljs-comment">// 通 过 提 供CMakeLists.txt文 件 的 路 径</span><br> <span class="hljs-comment">// 作 为 参 数 来 运 行CMake。</span><br>make −j4 <span class="hljs-comment">// 通 过make编 译 代 码， −j4 表 示 通 过</span><br>    <span class="hljs-comment">// 4个 内 核 进 行 并 行 化 编 译。</span><br><br>./Rasterizer <span class="hljs-comment">//循 环 运 行 程 序， 创 建 一 个 窗 口 显 示， 且 你 可 以</span><br> <span class="hljs-comment">//使 用A键 和D键 旋 转 三 角 形。</span><br><br>./Rasterizer −r <span class="hljs-number">20</span> <span class="hljs-comment">//运 行 程 序 并 将 三 角 形 旋 转20度,然 后 将</span><br>   <span class="hljs-comment">//结 果 存 在output.png中</span><br><br>./Rasterizer −r <span class="hljs-number">20</span> image.png <span class="hljs-comment">//运 行 程 序 并 将 三 角 形 旋 转20度，</span><br> <span class="hljs-comment">//然 后 将 结 果 存 在image.png中。</span><br><br></code></pre></td></tr></table></figure><h4 id="代码框架内容理解">2.代码框架内容理解</h4><p>两个头文件：<strong>Triangle.hpp</strong>、<strong>raterizer.cpp</strong></p><p>三个cpp文件：<strong>mian.cpp</strong>、<strong>Triangle.cpp</strong>、<strong>raterizer.cpp</strong></p><h5 id="triangle.hpp">2.1<code>Triangle.hpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> RASTERIZER_TRIANGLE_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RASTERIZER_TRIANGLE_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;eigen3/Eigen/Eigen&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Eigen;<span class="hljs-comment">//线性代数函数库</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span><br>&#123;<br>  <span class="hljs-keyword">public</span>:<br>    Vector3f v[<span class="hljs-number">3</span>]; <span class="hljs-comment">/*the original coordinates of the triangle, v0, v1, v2 in</span><br><span class="hljs-comment">                      counter clockwise order*/</span><br>    <span class="hljs-comment">/*Per vertex values*/</span><br>    Vector3f color[<span class="hljs-number">3</span>];      <span class="hljs-comment">// color at each vertex每个顶点的颜色;</span><br>    Vector2f tex_coords[<span class="hljs-number">3</span>]; <span class="hljs-comment">// texture u,v 材质</span><br>    Vector3f normal[<span class="hljs-number">3</span>];     <span class="hljs-comment">// normal vector for each vertex每个顶点的法向量</span><br><br>    <span class="hljs-comment">// Texture *tex;</span><br>    <span class="hljs-built_in">Triangle</span>();<br><span class="hljs-comment">//a,b,c 三个函数分别返回三角形的三个顶点的向量坐标</span><br>    <span class="hljs-function">Eigen::Vector3f <span class="hljs-title">a</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> v[<span class="hljs-number">0</span>]; &#125;<br>    <span class="hljs-function">Eigen::Vector3f <span class="hljs-title">b</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> v[<span class="hljs-number">1</span>]; &#125;<br>    <span class="hljs-function">Eigen::Vector3f <span class="hljs-title">c</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> v[<span class="hljs-number">2</span>]; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, Vector3f ver)</span></span>; <span class="hljs-comment">/*set i-th vertex coordinates */</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setNormal</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, Vector3f n)</span></span>;   <span class="hljs-comment">/*set i-th vertex normal vector*/</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> g, <span class="hljs-type">float</span> b)</span></span>; <span class="hljs-comment">/*set i-th vertex color*/</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setTexCoord</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, <span class="hljs-type">float</span> s,<span class="hljs-type">float</span> t)</span></span>; <span class="hljs-comment">/*set i-th vertex texture coordinate*/</span><br>    <span class="hljs-function">std::array&lt;Vector4f, 3&gt; <span class="hljs-title">toVector4</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// RASTERIZER_TRIANGLE_H</span></span><br><br></code></pre></td></tr></table></figure><h5 id="triangle.cpp">2.2<code>Triangle.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Triangle.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;array&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br>Triangle::<span class="hljs-built_in">Triangle</span>()<span class="hljs-comment">//构造函数</span><br>&#123;<br>    v[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>    v[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>    v[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br><br>    color[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br>    color[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br>    color[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br><br>    tex_coords[<span class="hljs-number">0</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br>    tex_coords[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br>    tex_coords[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>;<br>&#125;<br><span class="hljs-comment">//将三角形的三个顶点坐标存储到v[3]中，在rasterizer.cpp中可以看到用法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Triangle::setVertex</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, Eigen::Vector3f ver)</span> </span>&#123; v[ind] = ver; &#125;<br><span class="hljs-comment">//将法向量保存到normal[3]中</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Triangle::setNormal</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, Vector3f n)</span> </span>&#123; normal[ind] = n; &#125;<br><span class="hljs-comment">//将颜色信息保存到color[3]中</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Triangle::setColor</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, <span class="hljs-type">float</span> r, <span class="hljs-type">float</span> g, <span class="hljs-type">float</span> b)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> ((r &lt; <span class="hljs-number">0.0</span>) || (r &gt; <span class="hljs-number">255.</span>) || (g &lt; <span class="hljs-number">0.0</span>) || (g &gt; <span class="hljs-number">255.</span>) || (b &lt; <span class="hljs-number">0.0</span>) ||<br>        (b &gt; <span class="hljs-number">255.</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Invalid color values&quot;</span>);<br>    &#125;<br><br>    color[ind] = <span class="hljs-built_in">Vector3f</span>((<span class="hljs-type">float</span>)r / <span class="hljs-number">255.</span>, (<span class="hljs-type">float</span>)g / <span class="hljs-number">255.</span>, (<span class="hljs-type">float</span>)b / <span class="hljs-number">255.</span>);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-comment">//</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Triangle::setTexCoord</span><span class="hljs-params">(<span class="hljs-type">int</span> ind, <span class="hljs-type">float</span> s, <span class="hljs-type">float</span> t)</span></span><br><span class="hljs-function"></span>&#123;<br>    tex_coords[ind] = <span class="hljs-built_in">Vector2f</span>(s, t);<br>&#125;<br><span class="hljs-comment">//将三维坐标转换成四维，多的元素用1补充</span><br><span class="hljs-function">std::array&lt;Vector4f, 3&gt; <span class="hljs-title">Triangle::toVector4</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span><br><span class="hljs-function"></span>&#123;<br>    std::array&lt;Vector4f, 3&gt; res;<br>    std::<span class="hljs-built_in">transform</span>(std::<span class="hljs-built_in">begin</span>(v), std::<span class="hljs-built_in">end</span>(v), res.<span class="hljs-built_in">begin</span>(), [](<span class="hljs-keyword">auto</span>&amp; vec) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector4f</span>(vec.<span class="hljs-built_in">x</span>(), vec.<span class="hljs-built_in">y</span>(), vec.<span class="hljs-built_in">z</span>(), <span class="hljs-number">1.f</span>);<br>    &#125;);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="rasterizer.hpp">2.3<code>rasterizer.hpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//此文件用来创建rst命名空间，在这个命名空间里创建了所需要的变量和类</span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Triangle.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;eigen3/Eigen/Eigen&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> Eigen;<br><br><span class="hljs-keyword">namespace</span> rst &#123;<br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Buffers</span><br>&#123;<br>    Color = <span class="hljs-number">1</span>,<br>    Depth = <span class="hljs-number">2</span><br>&#125;;<br><span class="hljs-comment">//内联函数重载|运算</span><br><span class="hljs-keyword">inline</span> Buffers <span class="hljs-keyword">operator</span>|(Buffers a, Buffers b)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Buffers</span>((<span class="hljs-type">int</span>)a | (<span class="hljs-type">int</span>)b);<br>&#125;<br><span class="hljs-comment">//内联函数重载&amp;运算</span><br><span class="hljs-keyword">inline</span> Buffers <span class="hljs-keyword">operator</span>&amp;(Buffers a, Buffers b)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Buffers</span>((<span class="hljs-type">int</span>)a &amp; (<span class="hljs-type">int</span>)b);<br>&#125;<br><br><span class="hljs-keyword">enum class</span> <span class="hljs-title class_">Primitive</span><br>&#123;<br>    Line,<br>    Triangle<span class="hljs-comment">//class Primitive类的Line和Triangle作用是告诉后面的draw函数需要绘制的图形，目前只实现了             //三角形和直线</span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * For the curious : The draw function takes two buffer id&#x27;s as its arguments.</span><br><span class="hljs-comment"> * draw函数将两个缓冲区id作为其参数</span><br><span class="hljs-comment"> * These two structs make sure that if you mix up with their orders, the</span><br><span class="hljs-comment"> * compiler won&#x27;t compile it. Aka : Type safety</span><br><span class="hljs-comment"> * */</span><br> <br><span class="hljs-comment">//结构体pos_buf_id和ind_buf_id的作用是标记</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">pos_buf_id</span><br>&#123;<br>    <span class="hljs-type">int</span> pos_id = <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ind_buf_id</span><br>&#123;<br>    <span class="hljs-type">int</span> ind_id = <span class="hljs-number">0</span>;<br>&#125;;<br><span class="hljs-comment">//class rasterizer的声明:构造函数，初始化frame_buf(像素数组)和depth_buf(深度数组)为w*h大小</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">rasterizer</span><br>&#123;<br>  <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">rasterizer</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h);<span class="hljs-comment">//w指屏幕宽度，h指屏幕高度</span><br>    <span class="hljs-comment">//函数load_position的作用是储存位置信息</span><br>    <span class="hljs-function">pos_buf_id <span class="hljs-title">load_positions</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Eigen::Vector3f&gt;&amp; positions)</span></span>;<br>    <span class="hljs-comment">//函数load_indices的作用是储存索引信息</span><br>    <span class="hljs-function">ind_buf_id <span class="hljs-title">load_indices</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;Eigen::Vector3i&gt;&amp; indices)</span></span>;<br><br>    <span class="hljs-comment">//函数set_model的作用是获取模型变换矩阵</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_model</span><span class="hljs-params">(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; m)</span></span>;<br>    <span class="hljs-comment">//函数set_view的作用是获取视图变换矩阵</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_view</span><span class="hljs-params">(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; v)</span></span>;<br>    <span class="hljs-comment">//函数set_projection的作用是获取透视投影变换矩阵</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_projection</span><span class="hljs-params">(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; p)</span></span>;<br><br>    <span class="hljs-comment">//函数set_pixel的作用是把每个需要绘制的点的像素信息保存到像素数组frame_buff里</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">set_pixel</span><span class="hljs-params">(<span class="hljs-type">const</span> Eigen::Vector3f&amp; point, <span class="hljs-type">const</span> Eigen::Vector3f&amp; color)</span></span>;<br><br>    <span class="hljs-comment">//函数clear的作用是清除整个显示屏幕，实现方法是把两个缓存数组都置为0</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">(Buffers buff)</span></span>;<br><br>    <span class="hljs-comment">//函数draw的作用是把所有的点通过mvp变换和视口变换，转换成可以在我们的w*h大小的屏幕上显示的点，并通过//setVertex函数保存到Triangle里的v[]中.</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw</span><span class="hljs-params">(pos_buf_id pos_buffer, ind_buf_id ind_buffer, Primitive type)</span></span>;<br><br>    <span class="hljs-comment">//函数frame_buffer的作用是返回像素数组</span><br>    <span class="hljs-function">std::vector&lt;Eigen::Vector3f&gt;&amp; <span class="hljs-title">frame_buffer</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> frame_buf; &#125;<br><br>  <span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">//函数draw_line的作用是通过Bresenham算法来计算出需要绘制的像素点</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">draw_line</span><span class="hljs-params">(Eigen::Vector3f begin, Eigen::Vector3f end)</span></span>;<br>    <span class="hljs-comment">//函数raster_wireframe的作用是分别调用三次draw_line来计算三条线</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">rasterize_wireframe</span><span class="hljs-params">(<span class="hljs-type">const</span> Triangle&amp; t)</span></span>;<br><br>  <span class="hljs-keyword">private</span>:<br>    Eigen::Matrix4f model;<br>    Eigen::Matrix4f view;<br>    Eigen::Matrix4f projection;<br><br>    std::map&lt;<span class="hljs-type">int</span>, std::vector&lt;Eigen::Vector3f&gt;&gt; pos_buf;<br>    std::map&lt;<span class="hljs-type">int</span>, std::vector&lt;Eigen::Vector3i&gt;&gt; ind_buf;<br><br>    std::vector&lt;Eigen::Vector3f&gt; frame_buf;<br>    std::vector&lt;<span class="hljs-type">float</span>&gt; depth_buf;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_index</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span></span>;<br><br>    <span class="hljs-type">int</span> width, height;<br><br>    <span class="hljs-type">int</span> next_id = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">get_next_id</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> next_id++; &#125;<br>&#125;;<br>&#125; <span class="hljs-comment">// namespace rst</span><br><br></code></pre></td></tr></table></figure><h5 id="rasterizer.cpp">2.4<code>rasterizer.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rasterizer.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br><br>rst::pos_buf_id rst::rasterizer::<span class="hljs-built_in">load_positions</span>(<span class="hljs-type">const</span> std::vector&lt;Eigen::Vector3f&gt; &amp;positions)<br>&#123;<br>    <span class="hljs-keyword">auto</span> id = <span class="hljs-built_in">get_next_id</span>();<br>    pos_buf.<span class="hljs-built_in">emplace</span>(id, positions);<br><br>    <span class="hljs-keyword">return</span> &#123;id&#125;;<br>&#125;<br><br>rst::ind_buf_id rst::rasterizer::<span class="hljs-built_in">load_indices</span>(<span class="hljs-type">const</span> std::vector&lt;Eigen::Vector3i&gt; &amp;indices)<br>&#123;<br>    <span class="hljs-keyword">auto</span> id = <span class="hljs-built_in">get_next_id</span>();<br>    ind_buf.<span class="hljs-built_in">emplace</span>(id, indices);<br><br>    <span class="hljs-keyword">return</span> &#123;id&#125;;<br>&#125;<br><br><span class="hljs-comment">// Bresenham&#x27;s line drawing algorithm</span><br><span class="hljs-comment">// Code taken from a stack overflow answer: https://stackoverflow.com/a/16405254</span><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">draw_line</span>(Eigen::Vector3f begin, Eigen::Vector3f end)<br>&#123;<br>    <span class="hljs-keyword">auto</span> x1 = begin.<span class="hljs-built_in">x</span>();<br>    <span class="hljs-keyword">auto</span> y1 = begin.<span class="hljs-built_in">y</span>();<br>    <span class="hljs-keyword">auto</span> x2 = end.<span class="hljs-built_in">x</span>();<br>    <span class="hljs-keyword">auto</span> y2 = end.<span class="hljs-built_in">y</span>();<br><br>    Eigen::Vector3f line_color = &#123;<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>&#125;;<br><br>    <span class="hljs-type">int</span> x,y,dx,dy,dx1,dy1,px,py,xe,ye,i;<br><br>    dx=x2-x1;<br>    dy=y2-y1;<br>    dx1=<span class="hljs-built_in">fabs</span>(dx);<br>    dy1=<span class="hljs-built_in">fabs</span>(dy);<br>    px=<span class="hljs-number">2</span>*dy1-dx1;<br>    py=<span class="hljs-number">2</span>*dx1-dy1;<br><br>    <span class="hljs-keyword">if</span>(dy1&lt;=dx1)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(dx&gt;=<span class="hljs-number">0</span>)<br>        &#123;<br>            x=x1;<br>            y=y1;<br>            xe=x2;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x=x2;<br>            y=y2;<br>            xe=x1;<br>        &#125;<br>        Eigen::Vector3f point = Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, <span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">set_pixel</span>(point,line_color);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;x&lt;xe;i++)<br>        &#123;<br>            x=x+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(px&lt;<span class="hljs-number">0</span>)<br>            &#123;<br>                px=px+<span class="hljs-number">2</span>*dy1;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>((dx&lt;<span class="hljs-number">0</span> &amp;&amp; dy&lt;<span class="hljs-number">0</span>) || (dx&gt;<span class="hljs-number">0</span> &amp;&amp; dy&gt;<span class="hljs-number">0</span>))<br>                &#123;<br>                    y=y+<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    y=y<span class="hljs-number">-1</span>;<br>                &#125;<br>                px=px+<span class="hljs-number">2</span>*(dy1-dx1);<br>            &#125;<br><span class="hljs-comment">//            delay(0);</span><br>            Eigen::Vector3f point = Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, <span class="hljs-number">1.0f</span>);<br>            <span class="hljs-built_in">set_pixel</span>(point,line_color);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(dy&gt;=<span class="hljs-number">0</span>)<br>        &#123;<br>            x=x1;<br>            y=y1;<br>            ye=y2;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            x=x2;<br>            y=y2;<br>            ye=y1;<br>        &#125;<br>        Eigen::Vector3f point = Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, <span class="hljs-number">1.0f</span>);<br>        <span class="hljs-built_in">set_pixel</span>(point,line_color);<br>        <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;y&lt;ye;i++)<br>        &#123;<br>            y=y+<span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span>(py&lt;=<span class="hljs-number">0</span>)<br>            &#123;<br>                py=py+<span class="hljs-number">2</span>*dx1;<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>((dx&lt;<span class="hljs-number">0</span> &amp;&amp; dy&lt;<span class="hljs-number">0</span>) || (dx&gt;<span class="hljs-number">0</span> &amp;&amp; dy&gt;<span class="hljs-number">0</span>))<br>                &#123;<br>                    x=x+<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    x=x<span class="hljs-number">-1</span>;<br>                &#125;<br>                py=py+<span class="hljs-number">2</span>*(dx1-dy1);<br>            &#125;<br><span class="hljs-comment">//            delay(0);</span><br>            Eigen::Vector3f point = Eigen::<span class="hljs-built_in">Vector3f</span>(x, y, <span class="hljs-number">1.0f</span>);<br>            <span class="hljs-built_in">set_pixel</span>(point,line_color);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">to_vec4</span><span class="hljs-params">(<span class="hljs-type">const</span> Eigen::Vector3f&amp; v3, <span class="hljs-type">float</span> w = <span class="hljs-number">1.0f</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Vector4f</span>(v3.<span class="hljs-built_in">x</span>(), v3.<span class="hljs-built_in">y</span>(), v3.<span class="hljs-built_in">z</span>(), w);<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">draw</span>(rst::pos_buf_id pos_buffer, rst::ind_buf_id ind_buffer, rst::Primitive type)<br>&#123;<br>    <span class="hljs-keyword">if</span> (type != rst::Primitive::Triangle)<br>    &#123;<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Drawing primitives other than triangle is not implemented yet!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">auto</span>&amp; buf = pos_buf[pos_buffer.pos_id];<br>    <span class="hljs-keyword">auto</span>&amp; ind = ind_buf[ind_buffer.ind_id];<br><br>    <span class="hljs-type">float</span> f1 = (<span class="hljs-number">100</span> - <span class="hljs-number">0.1</span>) / <span class="hljs-number">2.0</span>;<br>    <span class="hljs-type">float</span> f2 = (<span class="hljs-number">100</span> + <span class="hljs-number">0.1</span>) / <span class="hljs-number">2.0</span>;<br><br>    Eigen::Matrix4f mvp = projection * view * model;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; i : ind)<br>    &#123;<br>        Triangle t;<br><br>        Eigen::Vector4f v[] = &#123;<br>                mvp * <span class="hljs-built_in">to_vec4</span>(buf[i[<span class="hljs-number">0</span>]], <span class="hljs-number">1.0f</span>),<br>                mvp * <span class="hljs-built_in">to_vec4</span>(buf[i[<span class="hljs-number">1</span>]], <span class="hljs-number">1.0f</span>),<br>                mvp * <span class="hljs-built_in">to_vec4</span>(buf[i[<span class="hljs-number">2</span>]], <span class="hljs-number">1.0f</span>)<br>        &#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; vec : v) &#123;<br>            vec /= vec.<span class="hljs-built_in">w</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp; vert : v)<br>        &#123;<br>            vert.<span class="hljs-built_in">x</span>() = <span class="hljs-number">0.5</span>*width*(vert.<span class="hljs-built_in">x</span>()+<span class="hljs-number">1.0</span>);<br>            vert.<span class="hljs-built_in">y</span>() = <span class="hljs-number">0.5</span>*height*(vert.<span class="hljs-built_in">y</span>()+<span class="hljs-number">1.0</span>);<br>            vert.<span class="hljs-built_in">z</span>() = vert.<span class="hljs-built_in">z</span>() * f1 + f2;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; ++i)<br>        &#123;<br>            t.<span class="hljs-built_in">setVertex</span>(i, v[i].<span class="hljs-built_in">head</span>&lt;<span class="hljs-number">3</span>&gt;());<br>            t.<span class="hljs-built_in">setVertex</span>(i, v[i].<span class="hljs-built_in">head</span>&lt;<span class="hljs-number">3</span>&gt;());<br>            t.<span class="hljs-built_in">setVertex</span>(i, v[i].<span class="hljs-built_in">head</span>&lt;<span class="hljs-number">3</span>&gt;());<br>        &#125;<br><br>        t.<span class="hljs-built_in">setColor</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255.0</span>,  <span class="hljs-number">0.0</span>,  <span class="hljs-number">0.0</span>);<br>        t.<span class="hljs-built_in">setColor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0.0</span>  ,<span class="hljs-number">255.0</span>,  <span class="hljs-number">0.0</span>);<br>        t.<span class="hljs-built_in">setColor</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0.0</span>  ,  <span class="hljs-number">0.0</span>,<span class="hljs-number">255.0</span>);<br><br>        <span class="hljs-built_in">rasterize_wireframe</span>(t);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">rasterize_wireframe</span>(<span class="hljs-type">const</span> Triangle&amp; t)<br>&#123;<br>    <span class="hljs-built_in">draw_line</span>(t.<span class="hljs-built_in">c</span>(), t.<span class="hljs-built_in">a</span>());<br>    <span class="hljs-built_in">draw_line</span>(t.<span class="hljs-built_in">c</span>(), t.<span class="hljs-built_in">b</span>());<br>    <span class="hljs-built_in">draw_line</span>(t.<span class="hljs-built_in">b</span>(), t.<span class="hljs-built_in">a</span>());<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">set_model</span>(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; m)<br>&#123;<br>    model = m;<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">set_view</span>(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; v)<br>&#123;<br>    view = v;<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">set_projection</span>(<span class="hljs-type">const</span> Eigen::Matrix4f&amp; p)<br>&#123;<br>    projection = p;<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">clear</span>(rst::Buffers buff)<br>&#123;<br>    <span class="hljs-keyword">if</span> ((buff &amp; rst::Buffers::Color) == rst::Buffers::Color)<br>    &#123;<br>        std::<span class="hljs-built_in">fill</span>(frame_buf.<span class="hljs-built_in">begin</span>(), frame_buf.<span class="hljs-built_in">end</span>(), Eigen::Vector3f&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((buff &amp; rst::Buffers::Depth) == rst::Buffers::Depth)<br>    &#123;<br>        std::<span class="hljs-built_in">fill</span>(depth_buf.<span class="hljs-built_in">begin</span>(), depth_buf.<span class="hljs-built_in">end</span>(), std::numeric_limits&lt;<span class="hljs-type">float</span>&gt;::<span class="hljs-built_in">infinity</span>());<br>    &#125;<br>&#125;<br><br>rst::rasterizer::<span class="hljs-built_in">rasterizer</span>(<span class="hljs-type">int</span> w, <span class="hljs-type">int</span> h) : <span class="hljs-built_in">width</span>(w), <span class="hljs-built_in">height</span>(h)<br>&#123;<br>    frame_buf.<span class="hljs-built_in">resize</span>(w * h);<br>    depth_buf.<span class="hljs-built_in">resize</span>(w * h);<br>&#125;<br><br><span class="hljs-type">int</span> rst::rasterizer::<span class="hljs-built_in">get_index</span>(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)<br>&#123;<br>    <span class="hljs-keyword">return</span> (height-y)*width + x;<br>&#125;<br><br><span class="hljs-type">void</span> rst::rasterizer::<span class="hljs-built_in">set_pixel</span>(<span class="hljs-type">const</span> Eigen::Vector3f&amp; point, <span class="hljs-type">const</span> Eigen::Vector3f&amp; color)<br>&#123;<br>    <span class="hljs-comment">//old index: auto ind = point.y() + point.x() * width;</span><br>    <span class="hljs-keyword">if</span> (point.<span class="hljs-built_in">x</span>() &lt; <span class="hljs-number">0</span> || point.<span class="hljs-built_in">x</span>() &gt;= width ||<br>        point.<span class="hljs-built_in">y</span>() &lt; <span class="hljs-number">0</span> || point.<span class="hljs-built_in">y</span>() &gt;= height) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">auto</span> ind = (height-point.<span class="hljs-built_in">y</span>())*width + point.<span class="hljs-built_in">x</span>();<br>    frame_buf[ind] = color;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="main.cpp">2.5<code>main.cpp</code></h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Triangle.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;rasterizer.hpp&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;eigen3/Eigen/Eigen&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;opencv2/opencv.hpp&gt;</span></span><br><br><span class="hljs-keyword">constexpr</span> <span class="hljs-type">double</span> MY_PI = <span class="hljs-number">3.1415926</span>;<br><br><span class="hljs-comment">//视角变换 参数是相机所在位置</span><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_view_matrix</span><span class="hljs-params">(Eigen::Vector3f eye_pos)</span></span><br><span class="hljs-function"></span>&#123;<br>    Eigen::Matrix4f view = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    Eigen::Matrix4f translate;<br>    translate &lt;&lt; <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -eye_pos[<span class="hljs-number">0</span>], <br>     <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, -eye_pos[<span class="hljs-number">1</span>], <br>     <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, -eye_pos[<span class="hljs-number">2</span>], <br>     <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    view = translate * view;<span class="hljs-comment">//将视角平移到原点</span><br><br>    <span class="hljs-keyword">return</span> view;<br>&#125;<br><br><span class="hljs-comment">//模型变换 传入的是旋转角度</span><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_model_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> rotation_angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    Eigen::Matrix4f model = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<span class="hljs-comment">//用单位矩阵对model进行了初始化</span><br>    <br>    <span class="hljs-comment">//先将角度制转换为弧度制</span><br>    <span class="hljs-type">double</span> rotation_arc = rotation_angle / <span class="hljs-number">180</span> * MY_PI;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement this function</span><br>    <span class="hljs-comment">// Create the model matrix for rotating the triangle around the Z axis.</span><br>    <span class="hljs-comment">// Then return it</span><br>    Eigen::Matrix4f rotation;<br>    rotation &lt;&lt; <span class="hljs-built_in">cos</span>(rotation_arc), -<span class="hljs-built_in">sin</span>(rotation_arc), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                <span class="hljs-built_in">sin</span>(rotation_arc),  <span class="hljs-built_in">cos</span>(rotation_arc), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <br>                <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    model = rotation * model;<br><br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br><br><span class="hljs-comment">//透视投影变换 参数含义分别为 可视角度，宽高比，近平面离摄像头距离，远平面离摄像头距离 知道可视角度、</span><br><span class="hljs-comment">//近平面距离和宽高比即可求出 l,r,t,b;且垂直方向和水平方向的可视角度在本作业中是一样的，所以l=b,t=r</span><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_projection_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> eye_fov, <span class="hljs-type">float</span> aspect_ratio,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      <span class="hljs-type">float</span> zNear, <span class="hljs-type">float</span> zFar)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-comment">// Students will implement this function</span><br>    <span class="hljs-type">double</span> halfFov = eye_fov * <span class="hljs-number">0.5</span> / <span class="hljs-number">180</span> * MY_PI;<span class="hljs-comment">//定义可视角度的一半</span><br>    <span class="hljs-type">double</span> top = zNear * <span class="hljs-built_in">tan</span>(halfFov);<span class="hljs-comment">//定义立方体的高</span><br>    <span class="hljs-type">double</span> right = top * aspect_ratio;<br>    <span class="hljs-type">double</span> left = -right;<br>    <span class="hljs-type">double</span> bottom = -top;<br><br>    <span class="hljs-comment">//传入的zNear和zFar只是距离是正的但在坐标空间实际应该是负的</span><br>    <span class="hljs-type">double</span> near = -zNear;<br>    <span class="hljs-type">double</span> far = -zFar;<br><br>    Eigen::Matrix4f projection = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    Eigen::Matrix4f mPersp_Ortho,mOrtho; <span class="hljs-comment">//声明透视到正交的矩阵和正交投影的矩阵</span><br>    mPersp_Ortho &lt;&lt; near, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">0</span>, near, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, near + far, -near * far, <br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>;<br><br>    mOrtho &lt;&lt; <span class="hljs-number">2</span>/(right - left), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (left + right)/(left - right), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">2</span>/(top - bottom), <span class="hljs-number">0</span>, (bottom + top)/(bottom - top), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>/(near - far), (far + near)/(far - near), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br><br>    projection = mOrtho*mPersp_Ortho;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement this function</span><br>    <span class="hljs-comment">// Create the projection matrix for the given parameters.</span><br>    <span class="hljs-comment">// Then return it.</span><br><br>    <span class="hljs-keyword">return</span> projection;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span>** argv)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">float</span> angle = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">bool</span> command_line = <span class="hljs-literal">false</span>;<br>    std::string filename = <span class="hljs-string">&quot;output.png&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (argc &gt;= <span class="hljs-number">3</span>) &#123;<br>        command_line = <span class="hljs-literal">true</span>;<br>        angle = std::<span class="hljs-built_in">stof</span>(argv[<span class="hljs-number">2</span>]); <span class="hljs-comment">// -r by default</span><br>        <span class="hljs-keyword">if</span> (argc == <span class="hljs-number">4</span>) &#123;<br>            filename = std::<span class="hljs-built_in">string</span>(argv[<span class="hljs-number">3</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-function">rst::rasterizer <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>)</span></span>;<span class="hljs-comment">//屏幕的宽和高都是700个像素点</span><br><br>    Eigen::Vector3f eye_pos = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//观测点</span><br><br>    std::vector&lt;Eigen::Vector3f&gt; pos&#123;&#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-2</span>&#125;, &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-2</span>&#125;&#125;;<span class="hljs-comment">//三角形初始点</span><br><br>    std::vector&lt;Eigen::Vector3i&gt; ind&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;&#125;;<br><br>    <span class="hljs-keyword">auto</span> pos_id = r.<span class="hljs-built_in">load_positions</span>(pos);<br>    <span class="hljs-keyword">auto</span> ind_id = r.<span class="hljs-built_in">load_indices</span>(ind);<br><br>    <span class="hljs-type">int</span> key = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> frame_count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (command_line) &#123;<br>        r.<span class="hljs-built_in">clear</span>(rst::Buffers::Color | rst::Buffers::Depth);<br><br>        r.<span class="hljs-built_in">set_model</span>(<span class="hljs-built_in">get_model_matrix</span>(angle));<br>        r.<span class="hljs-built_in">set_view</span>(<span class="hljs-built_in">get_view_matrix</span>(eye_pos));<br>        r.<span class="hljs-built_in">set_projection</span>(<span class="hljs-built_in">get_projection_matrix</span>(<span class="hljs-number">45</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">50</span>));<br><br>        r.<span class="hljs-built_in">draw</span>(pos_id, ind_id, rst::Primitive::Triangle);<br>        <span class="hljs-function">cv::Mat <span class="hljs-title">image</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>, CV_32FC3, r.frame_buffer().data())</span></span>;<br>        image.<span class="hljs-built_in">convertTo</span>(image, CV_8UC3, <span class="hljs-number">1.0f</span>);<br><br>        cv::<span class="hljs-built_in">imwrite</span>(filename, image);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (key != <span class="hljs-number">27</span>) &#123;<br>        r.<span class="hljs-built_in">clear</span>(rst::Buffers::Color | rst::Buffers::Depth);<br><br>        r.<span class="hljs-built_in">set_model</span>(<span class="hljs-built_in">get_model_matrix</span>(angle));<br>        r.<span class="hljs-built_in">set_view</span>(<span class="hljs-built_in">get_view_matrix</span>(eye_pos));<br>        r.<span class="hljs-built_in">set_projection</span>(<span class="hljs-built_in">get_projection_matrix</span>(<span class="hljs-number">45</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">50</span>));<br><br>        r.<span class="hljs-built_in">draw</span>(pos_id, ind_id, rst::Primitive::Triangle);<br><br>        <span class="hljs-function">cv::Mat <span class="hljs-title">image</span><span class="hljs-params">(<span class="hljs-number">700</span>, <span class="hljs-number">700</span>, CV_32FC3, r.frame_buffer().data())</span></span>;<br>        image.<span class="hljs-built_in">convertTo</span>(image, CV_8UC3, <span class="hljs-number">1.0f</span>);<br>        cv::<span class="hljs-built_in">imshow</span>(<span class="hljs-string">&quot;image&quot;</span>, image);<br>        key = cv::<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">10</span>);<br><br>        std::cout &lt;&lt; <span class="hljs-string">&quot;frame count: &quot;</span> &lt;&lt; frame_count++ &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;a&#x27;</span>) &#123;<br>            angle += <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (key == <span class="hljs-string">&#x27;d&#x27;</span>) &#123;<br>            angle -= <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="作业">3.作业</h4><p>本次作业的任务是填写一个旋转矩阵和一个透视投影矩阵。给定三维下三个 点<code>v0(2.0, 0.0, −2.0), v1(0.0, 2.0, −2.0), v2(−2.0, 0.0, −2.0)</code>,你需要<strong>将这三个点的坐标变换为屏幕坐标并在屏幕上绘制出对应的线框三角形</strong>(在代码框架中，我们已经提供了 draw_triangle函数，所以你只需要去构建变换矩阵即可)。简而言之，我们需要进行模型、视图、投影、视口等变换来将三角形显示在屏幕上。在提供的代码框架中，我们留下了<strong>模型变换</strong>和<strong>投影变换</strong>的部分给你去完成。</p><p><strong>提高作业:</strong>将三角形绕任意过原点的轴旋转。</p><h5 id="基础作业思路和实现">3.1基础作业思路和实现</h5><p>模型变换：就是绕z轴的旋转矩阵<br /><span class="math display">\[R_z(\alpha)=\begin{pmatrix}cos\alpha&amp;-sin\alpha&amp;0&amp;0\\sin\alpha&amp;cos\alpha&amp;0&amp;0\\0&amp;0&amp;1&amp;0\\ 0&amp;0&amp;0&amp;1\\ \end{pmatrix}\]</span></p><p>透视投影变换：是先将视锥Frustum压缩成正交投影的形式，然后再乘正交投影的矩阵即可得到透视投影矩阵<span class="math display">\[M_{persp \to ortho}=\begin{pmatrix} n &amp; 0&amp; 0&amp; 0\\0 &amp;n&amp; 0&amp; 0\\ 0 &amp; 0&amp; n+f&amp; -n*f\\ 0&amp;0&amp;1&amp;0\\\end{pmatrix}\]</span></p><p><span class="math display">\[M_{ortho} = M_{scale} \cdot M_{translate} = \begin{pmatrix}\frac{2}{r-l} &amp; 0&amp; 0&amp; 0\\0 &amp; \frac{2}{t-b}&amp; 0&amp;0\\ 0 &amp; 0&amp; \frac{2}{n-f}&amp; 0\\ 0&amp;0&amp;0&amp;1\\\end{pmatrix}\cdot\begin{pmatrix} 1 &amp; 0&amp; 0&amp;-\frac{r+l}{2}\\0 &amp; 1&amp; 0&amp; -\frac{t+b}{2}\\ 0 &amp; 0&amp;1&amp; -\frac{n+f}{2}\\ 0&amp;0&amp;0&amp;1\\\end{pmatrix}=\begin{pmatrix} \frac{2}{r-l} &amp; 0&amp; 0&amp;\frac{l+r}{l-r}\\0 &amp; \frac{2}{t-b}&amp; 0&amp; \frac{b+t}{b-t}\\ 0&amp; 0&amp; \frac{2}{n-f}&amp; \frac{f+n}{f-n}\\ 0&amp;0&amp;0&amp;1\\\end{pmatrix}\]</span></p><p>则$ M_{persp} = M_{ortho} M_{persp ortho}$</p><p><strong>代码实现为：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//模型变换 传入的是旋转角度</span><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_model_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> rotation_angle)</span></span><br><span class="hljs-function"></span>&#123;<br>    Eigen::Matrix4f model = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<span class="hljs-comment">//用单位矩阵对model进行了初始化</span><br>    <br>    <span class="hljs-comment">//先将角度制转换为弧度制</span><br>    <span class="hljs-type">double</span> rotation_arc = rotation_angle / <span class="hljs-number">180</span> * MY_PI;<br><br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Implement this function</span><br>    <span class="hljs-comment">// Create the model matrix for rotating the triangle around the Z axis.</span><br>    <span class="hljs-comment">// Then return it</span><br>    Eigen::Matrix4f rotation;<br>    rotation &lt;&lt; <span class="hljs-built_in">cos</span>(rotation_arc), -<span class="hljs-built_in">sin</span>(rotation_arc), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                <span class="hljs-built_in">sin</span>(rotation_arc),     <span class="hljs-built_in">cos</span>(rotation_arc), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>                <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <br>                <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    model = rotation * model;<br><br>    <span class="hljs-keyword">return</span> model;<br>&#125;<br><br><span class="hljs-comment">//透视投影变换 参数含义分别为 可视角度，宽高比，近平面离摄像头距离，远平面离摄像头距离 知道可视角度、</span><br><span class="hljs-comment">//近平面距离和宽高比即可求出 l,r,t,b;且垂直方向和水平方向的可视角度在本作业中是一样的，所以l=b,t=r</span><br><span class="hljs-function">Eigen::Matrix4f <span class="hljs-title">get_projection_matrix</span><span class="hljs-params">(<span class="hljs-type">float</span> eye_fov, <span class="hljs-type">float</span> aspect_ratio,</span></span><br><span class="hljs-params"><span class="hljs-function">                                      <span class="hljs-type">float</span> zNear, <span class="hljs-type">float</span> zFar)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">double</span> halfFov = eye_fov * <span class="hljs-number">0.5</span> / <span class="hljs-number">180</span> * MY_PI;<span class="hljs-comment">//定义可视角度的一半</span><br>    <span class="hljs-type">double</span> top = zNear * <span class="hljs-built_in">tan</span>(halfFov);<span class="hljs-comment">//定义立方体的高</span><br>    <span class="hljs-type">double</span> right = top * aspect_ratio;<br>    <span class="hljs-type">double</span> left = -right;<br>    <span class="hljs-type">double</span> bottom = -top;<br>    <br><br>    <span class="hljs-comment">//传入的zNear和zFar只是距离是正的但在坐标空间实际应该是负的</span><br>    <span class="hljs-type">double</span> near = -zNear;<br>    <span class="hljs-type">double</span> far = -zFar;<br><br>    Eigen::Matrix4f projection = Eigen::Matrix4f::<span class="hljs-built_in">Identity</span>();<br><br>    Eigen::Matrix4f mPersp_Ortho,mOrtho; <span class="hljs-comment">//声明透视到正交的矩阵和正交投影的矩阵</span><br>    mPersp_Ortho &lt;&lt; near, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">0</span>, near, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, near + far, -near * far, <br>                    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>;<br><br>    mOrtho &lt;&lt; <span class="hljs-number">2</span>/(right - left), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, (left + right)/(left - right), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">2</span>/(top - bottom), <span class="hljs-number">0</span>, (bottom + top)/(bottom - top), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>/(near - far), (far + near)/(far - near), <br>              <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>;<br><br>    projection = mOrtho*mPersp_Ortho;<br>    <br>    <span class="hljs-keyword">return</span> projection;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><p><imgsrc="https://cdn.jsdelivr.net/gh/Syan0o0/blog-img/img/Assignment1.png" /></p><h5 id="提高作业思路和实现">3.2提高作业思路和实现</h5>]]></content>
    
    
    <categories>
      
      <category>Computer Graphic</category>
      
      <category>Games101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphic</tag>
      
      <tag>Games101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Assignment0</title>
    <link href="/2022/05/12/Assignment0/"/>
    <url>/2022/05/12/Assignment0/</url>
    
    <content type="html"><![CDATA[<h1 id="games101作业0">Games101作业0</h1><h2 id="预备知识">预备知识</h2><h4 id="作业中常用c知识">1.作业中常用C++知识</h4><ul><li><p><code>C++</code>三角函数运算使用<strong>弧度</strong>制，且<strong>arccos和arcsin</strong>在math函数中是<strong>acos和asin</strong></p></li><li><p><code>Eigen</code>是课程使用的线性代数运算库，在main.cpp中，eigen 需要额外引入头文件 <eigen3/Eigen/Core></p><p><code>#include &lt;eigen3/Eigen/Core&gt;</code></p></li><li><p>常用运算</p><figure class="highlight c++"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Basic Example of cpp</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of cpp \n&quot;</span>;<br><span class="hljs-type">float</span> a = <span class="hljs-number">1.0</span>, b = <span class="hljs-number">2.0</span>;<br>std::cout &lt;&lt; a &lt;&lt; std::endl;<br>std::cout &lt;&lt; a/b &lt;&lt; std::endl;<br>std::cout &lt;&lt; std::<span class="hljs-built_in">sqrt</span>(b) &lt;&lt; std::endl;<br>std::cout &lt;&lt; std::<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>) &lt;&lt; std::endl;<br>std::cout &lt;&lt; std::<span class="hljs-built_in">sin</span>(<span class="hljs-number">30.0</span>/<span class="hljs-number">180.0</span>*<span class="hljs-built_in">acos</span>(<span class="hljs-number">-1</span>)) &lt;&lt; std::endl<br></code></pre></td></tr></table></figure><p>上述代码的作用是在三行分别输出 <em>a</em>, <spanclass="math inline">\(\frac{a}{b}\)</span> ,<spanclass="math inline">\(\sqrt b\)</span> , arccos(<em>−</em>1), sin(30)的计算结果，并安全退出程序。</p></li><li><p>由于在C++中三角函数使用弧度制，输入时可能是角度制，<strong>角度制转弧度制</strong>的公式为➗180° ✖️ π</p></li></ul><h4 id="c中常见错误指南">2.C++中常见错误指南</h4><ul><li><p><code>Compile Error</code>编译错误:认真阅读编译器给出的报错信息，找到报错位置修改代码；如果无法自己解决，建议将报错信息拷贝到Stack Overflow 查找类似情况。</p></li><li><p><code>undefined reference to xxx</code>: 一般是链接错误，检查CMakeLists.txt 中是否包括了需要引入的模块。</p></li><li><p><code>Segmentation Fault</code>:段错误，一般是数组越界、栈空间开销过大等问题导致。</p></li><li><p><code>Bus Error</code>: 总线错误，成因一般与段错误相似。</p></li><li><p><code>Math Error</code>: 一般是除数为 0 导致。</p></li></ul><h4 id="向量和矩阵的基本操作">3.向量和矩阵的基本操作</h4><ul><li>向量:定义一个三维浮点向量并且进行输出、加减、数乘</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Example of vector</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of vector \n&quot;</span>;<br><span class="hljs-comment">// vector definition</span><br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>,<span class="hljs-number">2.0f</span>,<span class="hljs-number">3.0f</span>)</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">w</span><span class="hljs-params">(<span class="hljs-number">1.0f</span>,<span class="hljs-number">0.0f</span>,<span class="hljs-number">0.0f</span>)</span></span>;<br><span class="hljs-comment">// vector output</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of output \n&quot;</span>;<br>std::cout &lt;&lt; v &lt;&lt; std::endl;<br><span class="hljs-comment">// vector add</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of add \n&quot;</span>;<br>std::cout &lt;&lt; v + w &lt;&lt; std::endl;<br><span class="hljs-comment">// vector scalar multiply</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of scalar multiply \n&quot;</span>;<br>std::cout &lt;&lt; v * <span class="hljs-number">3.0f</span> &lt;&lt; std::endl;<br>std::cout &lt;&lt; <span class="hljs-number">2.0f</span> * v &lt;&lt; std::endl;<br></code></pre></td></tr></table></figure><ul><li>矩阵：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Example of matrix</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of matrix \n&quot;</span>;<br><span class="hljs-comment">// matrix definition</span><br>Eigen::Matrix3f i,j;<br>i &lt;&lt; <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">8.0</span>, <span class="hljs-number">9.0</span>;<br>j &lt;&lt; <span class="hljs-number">2.0</span>, <span class="hljs-number">3.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">4.0</span>, <span class="hljs-number">6.0</span>, <span class="hljs-number">5.0</span>, <span class="hljs-number">9.0</span>, <span class="hljs-number">7.0</span>, <span class="hljs-number">8.0</span>;<br><span class="hljs-comment">// matrix output</span><br>std::cout &lt;&lt; <span class="hljs-string">&quot;Example of output \n&quot;</span>;<br>std::cout &lt;&lt; i &lt;&lt; std::endl;<br><span class="hljs-comment">// matrix add i + j</span><br><span class="hljs-comment">// matrix scalar multiply i * 2.0</span><br><span class="hljs-comment">// matrix multiply i * j</span><br><span class="hljs-comment">// matrix multiply vector i * v</span><br></code></pre></td></tr></table></figure><ul><li>在命令行中的运行main.cpp的结果：</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++">Example of cpp <br><span class="hljs-number">1</span><br><span class="hljs-number">0.5</span><br><span class="hljs-number">1.41421</span><br><span class="hljs-number">3.14159</span><br><span class="hljs-number">0.5</span><br>Example of vector <br>Example of output <br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>Example of add <br><span class="hljs-number">2</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br>Example of scalar multiply <br><span class="hljs-number">3</span><br><span class="hljs-number">6</span><br><span class="hljs-number">9</span><br><span class="hljs-number">2</span><br><span class="hljs-number">4</span><br><span class="hljs-number">6</span><br>Example of matrix <br>Example of output <br><span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span><br><span class="hljs-number">7</span> <span class="hljs-number">8</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure><h2 id="作业内容">作业内容</h2><h4 id="编译运行"><strong>1.编译运行</strong></h4><p>为方便之后的作业编写，本次作业要求使用 <strong>cmake</strong>进行编译。首先，编写好本次作业的程序 <strong>main.cpp</strong>。然后, 在<strong>main.cpp</strong> 所在目录下，打开终端(命令行)，在作业文件夹<strong>(文件夹必须包含CMakeLists.txt和main.cpp)</strong>右键Openin Terminal即可，依次输入：</p><p>• <code>mkdir build</code>: 创建名为 build 的文件夹。</p><p>• <code>cd build</code>: 移动到 build 文件夹下。</p><p>• <code>cmake ..</code>: 注意其中’..’ 表示上一级目录，若为’.’则表示当前目录。</p><p>• <code>make</code>: 编译程序，错误提示会显示在终端中。</p><p>• <code>./Transformation</code>：若上一步无错误，则可运行程序 (这里的Transformation为可执行文件名，可参照CMakeLists.txt 中修改)。</p><h4 id="作业"><strong>2.作业</strong></h4><p>给定一个点 <em>P</em><strong>=(2,1)</strong>,将该点绕原点先逆时针旋转 45<em>◦</em>，再平移 (1,2),计算出变换后点的坐标（要求用齐次坐标进行计算）。</p><p>思路：在齐次坐标中<em>P</em><strong>=(2,1)</strong>表示为<strong><em>p</em>=(2,1,1)</strong>.旋转是线性变换，旋转加平移是仿射变换，变换矩阵为<span class="math inline">\(M\)</span>= <spanclass="math inline">\(T\cdot R\)</span>，令变换后的坐标为<spanclass="math inline">\(p_1\)</span>,其中<spanclass="math inline">\(R\)</span>为旋转变换矩阵，<spanclass="math inline">\(T\)</span>为平移变换矩阵。 <spanclass="math display">\[p_1 = T\cdot R\cdot p = \begin{pmatrix} 1&amp;0&amp;1\\ 0&amp;1&amp;2\\0&amp;0&amp;1\\ \end{pmatrix}\cdot\begin{pmatrix}cos\frac{\pi}{4}&amp;-sin\frac{\pi}{4}&amp;0\\sin\frac{\pi}{4}&amp;cos\frac{\pi}{4}&amp;0\\0&amp;0&amp;1\\\end{pmatrix}\cdot\begin{pmatrix} 2\\ 1\\ 1\\ \end{pmatrix}\]</span> 代码实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//Assignment.cpp</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Core&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;eigen3/Eigen/Dense&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//声明齐次坐标下的p点</span><br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">2.0f</span>,<span class="hljs-number">1.0f</span>,<span class="hljs-number">1.0f</span>)</span></span>;<br><span class="hljs-function">Eigen::Vector3f <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">0.0f</span>,<span class="hljs-number">0.0f</span>,<span class="hljs-number">0.0f</span>)</span></span>;<br><span class="hljs-comment">//声明旋转矩阵和平移矩阵</span><br>Eigen::Matrix3f T,R;<br>T &lt;&lt; <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, <span class="hljs-number">2.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>;<br>R &lt;&lt; <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>, -<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>, <span class="hljs-number">0.0</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>, <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">2</span>)/<span class="hljs-number">2</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>;<br>cout &lt;&lt; T &lt;&lt; endl;<br>cout &lt;&lt; R &lt;&lt; endl;<br>p1 = T * R * p;<br><br>cout &lt;&lt; p1 &lt;&lt; endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-number">1</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br><span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span><br> <span class="hljs-number">0.707107</span> <span class="hljs-number">-0.707107</span>         <span class="hljs-number">0</span><br> <span class="hljs-number">0.707107</span>  <span class="hljs-number">0.707107</span>         <span class="hljs-number">0</span><br>        <span class="hljs-number">0</span>         <span class="hljs-number">0</span>         <span class="hljs-number">1</span><br><span class="hljs-number">1.70711</span><br><span class="hljs-number">4.12132</span><br>      <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Computer Graphic</category>
      
      <category>Games101</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphic</tag>
      
      <tag>Games101</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo和Markdown的基本使用</title>
    <link href="/2022/05/11/Hexo%E5%92%8CMarkdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2022/05/11/Hexo%E5%92%8CMarkdown%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1id="简介hexo更新博客步骤和markdown的基本使用">简介：Hexo更新博客步骤和Markdown的基本使用</h1><h2 id="hexo的基本使用">Hexo的基本使用</h2><h4 id="创建新文章">1.创建新文章</h4><p><code>$ hexo new [layout] &lt;title&gt;</code></p><p>可以在命令中指定文章的布局（layout），默认为<code>post</code>，可以通过修改 <code>_config.yml</code> 中的<code>default_layout</code> 参数来指定默认布局,Hexo有三种默认布局：<code>post</code>、<code>page</code> 和<code>draft</code>。在创建这三种不同类型的文件时，它们将会被保存到Blog中不同的路径。</p><h4 id="front-matter">2.Front-matter</h4><p>Front-matter 是文件最上方以 <code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><colgroup><col style="width: 12%" /><col style="width: 26%" /><col style="width: 61%" /></colgroup><thead><tr class="header"><th style="text-align: left;">参数</th><th style="text-align: left;">描述</th><th style="text-align: left;">默认值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>layout</code></td><td style="text-align: left;">布局</td><td style="text-align: left;"><ahref="https://hexo.io/zh-cn/docs/configuration#文章"><code>config.default_layout</code></a></td></tr><tr class="even"><td style="text-align: left;"><code>title</code></td><td style="text-align: left;">标题</td><td style="text-align: left;">文章的文件名</td></tr><tr class="odd"><td style="text-align: left;"><code>date</code></td><td style="text-align: left;">建立日期</td><td style="text-align: left;">文件建立日期</td></tr><tr class="even"><td style="text-align: left;"><code>updated</code></td><td style="text-align: left;">更新日期</td><td style="text-align: left;">文件更新日期</td></tr><tr class="odd"><td style="text-align: left;"><code>comments</code></td><td style="text-align: left;">开启文章的评论功能</td><td style="text-align: left;">true</td></tr><tr class="even"><td style="text-align: left;"><code>tags</code></td><td style="text-align: left;">标签（不适用于分页）</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><code>categories</code></td><td style="text-align: left;">分类（不适用于分页，使用）</td><td style="text-align: left;"></td></tr></tbody></table><p>其中</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Diary</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">Life</span><br></code></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">tags:</span><br>  - Diary<br>  - Life<br></code></pre></td></tr></table></figure><p>可以添加多个标签</p><h4 id="发布和部署博客">3.发布和部署博客</h4><p>清除文件：<code>$ hexo clean</code></p><p>文件生成：<code>$ hexo g</code></p><p>部署到github：<code>$ hexo  d</code></p><h4 id="latex数学公式">4.Latex数学公式</h4><h5 id="设置主题配置"><strong>4.1 设置主题配置</strong></h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure><p><code>specific</code>: 建议开启。当为 true 时，只有在文章 <ahref="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opens newwindow)</a>里指定 <code>math: true</code>才会在文章页启动公式转换，以便在页面不包含公式时提高加载速度。</p><p><code>engine</code>: 公式引擎，目前支持 <code>mathjax</code> 或<code>katex</code>。</p><h5 id="更换-markdown-渲染器"><strong>4.2 更换 Markdown渲染器</strong></h5><p>由于 Hexo 默认的 Markdown渲染器不支持复杂公式，所以必须更换渲染器。</p><p>先卸载原有渲染器：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后根据上方配置不同的 <code>engine</code>，推荐更换如下渲染器：</p><p>mathjax:<code>npm install hexo-renderer-pandoc --save</code><strong>并且还需<ahref="https://github.com/jgm/pandoc/blob/master/INSTALL.md">安装Pandoc(opens new window)</a></strong></p><p>katex:<code>npm install @upupming/hexo-renderer-markdown-it-plus --save</code></p><h5 id="安装完成后执行-hexo-clean"><strong>4.3 安装完成后执行<code>hexo clean</code></strong></h5><h4 id="评论模块的实现">5.评论模块的实现</h4><p>开启评论需要在<strong>主题配置</strong>中开启并指定评论模块：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">comments:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">disqus</span><br></code></pre></td></tr></table></figure><p>然后在下方还要设置对应评论模块的参数，比如 disqus 对应设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">shortname:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure><p>当前支持的评论插件如下：</p><ul><li><a href="https://valine.js.org/configuration.html">Valine (opens newwindow)</a>:基于 LeanCloud</li><li><a href="https://waline.js.org/">Waline (opens new window)</a>: 从Valine 衍生而来，额外增加了服务端和多种功能</li><li><a href="https://github.com/gitalk/gitalk">Gitalk (opens newwindow)</a>: 基于 GitHub Issues</li><li><a href="https://utteranc.es/">Utterances (opens new window)</a>:基于 GitHub Issues</li><li><a href="https://disqus.com/">Disqus (opens new window)</a>:基于第三方的服务</li><li><a href="http://changyan.kuaizhan.com/">畅言 (opens new window)</a>:基于第三方的服务</li><li><a href="https://www.livere.com/">来必力(Livere) (opens newwindow)</a>: 基于第三方的服务</li><li><a href="https://remark42.com/">Remark42 (opens new window)</a>:需要自托管服务端</li><li><a href="https://twikoo.js.org/">Twikoo (opens new window)</a>:基于腾讯云开发</li><li><a href="https://cusdis.com/">Cusdis (opens new window)</a>:基于第三方服务或自托管服务</li></ul><p>使用方式和参数设置请点击上面链接查看各自的文档。</p><p>国内用户推荐使用 Valine、Waline 或者 twikoo</p><p>如果设置后评论模块没有显示，说明配置没有完成，或者配置有误出现报错（请在浏览器控制台查看具体报错）</p><p>如果想在某个文章页关闭评论，或者想在某个自定义页面开启评论，可以通过在<a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter (opensnew window)</a>设置 <code>comment: bool</code> 来控制评论开关，或者通过<code>comment: 'type'</code> 来开启指定的评论插件。</p><p>例如在关于页开启并指定评论插件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">关于页</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">comment:</span> <span class="hljs-string">&#x27;valine&#x27;</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是正文内容</span><br></code></pre></td></tr></table></figure><h2 id="markdown的基本使用">Markdown的基本使用</h2><h4 id="数学公式的使用">1.数学公式的使用</h4><p><ahref="https://www.jianshu.com/p/383e8149136c">详细数学公式使用</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
